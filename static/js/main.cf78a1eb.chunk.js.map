{"version":3,"sources":["resources/index.js","TextBox/index.js","Button/index.js","Alert/index.js","Header/index.js","actions/index.js","constants/index.js","Footer/index.js","App.js","store/index.js","reducer/index.js","index.js"],"names":["constants","HEADER","WEATHER_API","INVALID_CITY","FOOTER","RESULT_HEADER","TextBox","props","className","type","name","id","value","city","placeholder","autoFocus","onChange","handleCity","Button","onClick","getWeather","Alert","weather","Object","keys","length","map","index","key","errorMsg","Header","resetWeatherInformation","dispatch","updateTemperatureData","payload","updateHumidityData","updateWindData","setErrorMessage","Footer","App","e","cityName","target","test","setState","state","fetchWeather","weatherInfo","this","across","temperature","humidity","wind","showAlert","console","log","React","Component","connect","a","url","constant","process","axios","get","response","data","currentWeather","_get","currentTemperature","currentHumidity","currentWindSpeed","store","createStore","action","assign","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf78a1eb.chunk.js","sourcesContent":["const constants = {\n    HEADER: 'Weather app',\n    WEATHER_API: 'https://api.openweathermap.org/data/2.5/weather',\n    INVALID_CITY: 'Enter valid city name',\n    FOOTER: 'Photo by Henry Be on Unsplash',\n    RESULT_HEADER: 'Weather Report'\n  }\n  \n  export default constants","import React from 'react';\nimport constants from '../resources' \nimport './style.css';\n\nconst TextBox = (props) => {\n  return (\n    <div className=\"text-field\">\n      <input type=\"text\" name=\"city\" id=\"city\" value={props.city} placeholder=\"Type the city name...\" autoFocus onChange={props.handleCity}/>\n    </div>\n  );\n}\n\nexport default TextBox;\n","import React from 'react';\nimport constants from '../resources' \nimport './style.css';\n\nconst Button = (props) => {\n  return (\n    <button type=\"submit\" onClick={props.getWeather}>Find my weather!</button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport constants from '../resources' \nimport './style.css';\n\nconst Alert = (props) => {\n  return (\n    <div>\n        {(props.weather && Object.keys(props.weather) && Object.keys(props.weather).length > 0) ? \n          <div className=\"showWeather\">\n            <div className=\"weatherHeader\">{constants.RESULT_HEADER}</div>\n            {Object.keys(props.weather) && Object.keys(props.weather).map((weather, index) => {\n              return (\n                  <p key={index}><span>{weather}</span> : <span>{props.weather[weather]}</span></p>\n              )\n            })}\n          </div> \n        : null }\n        {props.errorMsg ? <div className=\"showError\">{props.errorMsg}</div> : null }\n    </div>\n  );\n}\n\nexport default Alert;\n","import React from 'react';\nimport './style.css';\n\nconst Header = (props) => {\n  return (\n    <header className=\"app-header\">{props.name}</header>\n  );\n}\n\nexport default Header;\n","import axios from 'axios'\nimport constant from '../resources'\nimport { UPDATE_WEATHER, UPDATE_TEMPERATURE, UPDATE_HUMIDITY, UPDATE_WIND, SET_ERROR_MESSAGE, RESET_WEATHER } from '../constants'\nimport { get as _get } from 'lodash';\n\nexport function fetchWeather(city) {\n  return async dispatch => {\n    try {\n      let url = `${constant.WEATHER_API}?q=${city}&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`, currentWeather, currentTemperature, currentHumidity, currentWindSpeed\n      const response = await axios.get(url);\n      if(response && response.data)\n      currentWeather = _get(response.data, 'weather[0].description')\n      currentTemperature = _get(response.data, 'main.temp')\n      currentHumidity = _get(response.data, 'main.humidity')\n      currentWindSpeed = _get(response.data, 'wind.speed')\n      dispatch(updateWeatherData(currentWeather));\n      dispatch(updateTemperatureData(currentTemperature));\n      dispatch(updateHumidityData(currentHumidity));\n      dispatch(updateWindData(currentWindSpeed));\n    }\n    catch(error) {\n      dispatch(setErrorMessage(constant.INVALID_CITY));\n    }\n    return 'done';\n  }\n}\n\nexport const resetWeatherInformation = () => (dispatch) => {\n  dispatch(resetWeather())\n}\n\nfunction updateWeatherData(payload) {\n  return {\n    type: UPDATE_WEATHER,\n    payload\n  };\n}\n\nfunction updateTemperatureData(payload) {\n  return {\n    type: UPDATE_TEMPERATURE,\n    payload\n  };\n}\n\nfunction updateHumidityData(payload) {\n  return {\n    type: UPDATE_HUMIDITY,\n    payload\n  };\n}\n\nfunction updateWindData(payload) {\n  return {\n    type: UPDATE_WIND,\n    payload\n  };\n}\n\nfunction setErrorMessage(payload) {\n  return {\n    type: SET_ERROR_MESSAGE,\n    payload\n  }\n}\n\nfunction resetWeather() {\n  return {\n    type: RESET_WEATHER\n  }\n}\n","export const UPDATE_WEATHER = 'UPDATE_WEATHER'\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE'\nexport const RESET_WEATHER = 'RESET_WEATHER'\nexport const UPDATE_TEMPERATURE = 'UPDATE_TEMPERATURE'\nexport const UPDATE_HUMIDITY = 'UPDATE_HUMIDITY'\nexport const UPDATE_WIND = 'UPDATE_WIND'","import React from 'react';\nimport './style.css';\n\nconst Footer = (props) => {\n  return (\n    <footer className=\"app-footer\">{props.name}</footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport constants from './resources' \nimport './App.css';\nimport TextBox from './TextBox';\nimport Button from './Button';\nimport Alert from './Alert';\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { fetchWeather, resetWeatherInformation } from './actions';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      city: ''\n    }\n  }\n\n  handleCity = (e) => {\n    let regexp = /^[a-zA-Z ]+$/\n    let cityName = e.target.value;\n    if (cityName === '' || regexp.test(cityName)) {\n      this.setState({\n        city: e.target.value\n      }, () => {\n        if(this.state.city === '') {\n          this.props.resetWeatherInformation()\n        }\n      })\n    }\n  }\n\n  getWeather = () => {\n    this.props.fetchWeather(this.state.city)\n  }\n\n  render() {\n    let weatherInfo = {}\n    if(this.props.weather) {\n      weatherInfo.across = this.props.weather\n    }\n    if(this.props.temperature) {\n      weatherInfo.temperature = this.props.temperature\n    }\n    if(this.props.humidity) {\n      weatherInfo.humidity = this.props.humidity\n    }\n    if(this.props.wind) {\n      weatherInfo.wind = this.props.wind\n    }\n    const showAlert = (weatherInfo && Object.keys(weatherInfo) && Object.keys(weatherInfo).length > 0) || this.props.errorMsg\n    console.log('weatherInfo', weatherInfo)\n    return (\n      <div className=\"App\">\n        <Header name={constants.HEADER} />\n        <TextBox city={this.state.city} handleCity={this.handleCity} />\n        <Button getWeather={this.getWeather} />\n        {showAlert ? \n          <Alert \n            weather={weatherInfo}\n            errorMsg={this.props.errorMsg} \n          /> : null }\n        <Footer name={constants.FOOTER} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToprops = (state) => {\n  return {\n    weather: state.weather,\n    temperature: state.temperature,\n    humidity: state.humidity,\n    wind: state.wind,\n    errorMsg: state.errorMsg\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchWeather: (city) => dispatch(fetchWeather(city)),\n  resetWeatherInformation: () => dispatch(resetWeatherInformation())\n})\n\nexport default connect(mapStateToprops, mapDispatchToProps)(App);\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducer';\n\nconst store = createStore(reducer, {}, applyMiddleware(thunk));\nexport default store;","import { UPDATE_WEATHER, UPDATE_TEMPERATURE, UPDATE_HUMIDITY, UPDATE_WIND, SET_ERROR_MESSAGE, RESET_WEATHER } from '../constants'\n\nexport default function reducer(state = {\n    weather: '',\n    temperature: '',\n    humidity: '',\n    wind: '',\n    errorMsg: ''\n  }, action) {\n  switch (action.type) {\n    case UPDATE_WEATHER:\n      return Object.assign({}, state, {\n        weather: action.payload,\n        errorMsg: ''\n      });\n\n    case UPDATE_TEMPERATURE:\n        return Object.assign({}, state, {\n          temperature: action.payload,\n          errorMsg: ''\n        });\n    \n    case UPDATE_HUMIDITY:\n        return Object.assign({}, state, {\n          humidity: action.payload,\n          errorMsg: ''\n        });\n    \n    case UPDATE_WIND:\n        return Object.assign({}, state, {\n          wind: action.payload,\n          errorMsg: ''\n        });\n    \n    \n    case SET_ERROR_MESSAGE:\n      return Object.assign({}, state, {\n        errorMsg: action.payload,\n        weather: '',\n        temperature: '',\n        humidity: '',\n        wind: ''\n      });\n\n    case RESET_WEATHER:\n      return Object.assign({}, state, {\n        weather: '',\n        temperature: '',\n        humidity: '',\n        wind: '',\n        errorMsg: ''\n      })\n    \n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}