{"version":3,"sources":["resources/index.js","TextBox/index.js","Button/index.js","Alert/index.js","Header/index.js","actions/index.js","constants/index.js","Footer/index.js","App.js","store/index.js","reducer/index.js","index.js"],"names":["constants","HEADER","WEATHER_API","INVALID_CITY","FOOTER","TextBox","props","className","type","name","id","value","city","placeholder","autoFocus","onChange","handleCity","Button","onClick","getWeather","Alert","weather","errorMsg","Header","resetWeatherInformation","dispatch","setErrorMessage","payload","Footer","App","e","cityName","target","test","setState","state","fetchWeather","showAlert","this","React","Component","connect","a","url","constant","process","axios","get","response","data","currentWeather","_get","store","createStore","action","Object","assign","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d59956d8.chunk.js","sourcesContent":["const constants = {\n    HEADER: 'Weather app',\n    WEATHER_API: 'https://api.openweathermap.org/data/2.5/weather',\n    INVALID_CITY: 'Enter valid city name',\n    FOOTER: 'Photo by Henry Be on Unsplash'\n  }\n  \n  export default constants","import React from 'react';\nimport constants from '../resources' \nimport './style.css';\n\nconst TextBox = (props) => {\n  return (\n    <div className=\"text-field\">\n      <input type=\"text\" name=\"city\" id=\"city\" value={props.city} placeholder=\"Type the city name...\" autoFocus onChange={props.handleCity}/>\n    </div>\n  );\n}\n\nexport default TextBox;\n","import React from 'react';\nimport constants from '../resources' \nimport './style.css';\n\nconst Button = (props) => {\n  return (\n    <button type=\"submit\" onClick={props.getWeather}>Find my weather!</button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport constants from '../resources' \nimport './style.css';\n\nconst Alert = (props) => {\n  return (\n    <div>\n        {props.weather ? <div className=\"showWeather\">{props.weather}</div> : null }\n        {props.errorMsg ? <div className=\"showError\">{props.errorMsg}</div> : null }\n    </div>\n  );\n}\n\nexport default Alert;\n","import React from 'react';\nimport './style.css';\n\nconst Header = (props) => {\n  return (\n    <header className=\"app-header\">{props.name}</header>\n  );\n}\n\nexport default Header;\n","import axios from 'axios'\nimport constant from '../resources'\nimport { UPDATE_WEATHER, SET_ERROR_MESSAGE, RESET_WEATHER } from '../constants'\nimport { get as _get } from 'lodash';\n\nexport function fetchWeather(city) {\n  return async dispatch => {\n    try {\n      let url = `${constant.WEATHER_API}?q=${city}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`, currentWeather\n      const response = await axios.get(url);\n      if(response && response.data)\n      currentWeather = _get(response.data, 'weather[0].description')\n      dispatch(updateWeatherData(currentWeather));\n    }\n    catch(error) {\n      dispatch(setErrorMessage(constant.INVALID_CITY));\n    }\n    return 'done';\n  }\n}\n\nexport const resetWeatherInformation = () => (dispatch) => {\n  dispatch(resetWeather())\n}\n\nfunction updateWeatherData(payload) {\n  return {\n    type: UPDATE_WEATHER,\n    payload\n  };\n}\n\nfunction setErrorMessage(payload) {\n  return {\n    type: SET_ERROR_MESSAGE,\n    payload\n  }\n}\n\nfunction resetWeather() {\n  return {\n    type: RESET_WEATHER\n  }\n}\n","export const UPDATE_WEATHER = 'UPDATE_WEATHER'\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE'\nexport const RESET_WEATHER = 'RESET_WEATHER'","import React from 'react';\nimport './style.css';\n\nconst Footer = (props) => {\n  return (\n    <footer className=\"app-footer\">{props.name}</footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport constants from './resources' \nimport './App.css';\nimport TextBox from './TextBox';\nimport Button from './Button';\nimport Alert from './Alert';\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { fetchWeather, resetWeatherInformation } from './actions';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      city: ''\n    }\n  }\n\n  handleCity = (e) => {\n    let regexp = /^[a-zA-Z]+$/\n    let cityName = e.target.value;\n    if (cityName === '' || regexp.test(cityName)) {\n      this.setState({\n        city: e.target.value\n      }, () => {\n        if(this.state.city === '') {\n          this.props.resetWeatherInformation()\n        }\n      })\n    }\n  }\n\n  getWeather = () => {\n    this.props.fetchWeather(this.state.city)\n  }\n\n  render() {\n    const showAlert = this.props.weather || this.props.errorMsg\n    return (\n      <div className=\"App\">\n        <Header name={constants.HEADER} />\n        <TextBox city={this.state.city} handleCity={this.handleCity} />\n        <Button getWeather={this.getWeather} />\n        {showAlert ? <Alert weather={this.props.weather} errorMsg={this.props.errorMsg} /> : null }\n        <Footer name={constants.FOOTER} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToprops = (state) => {\n  return {\n    weather: state.weather,\n    errorMsg: state.errorMsg\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchWeather: (city) => dispatch(fetchWeather(city)),\n  resetWeatherInformation: () => dispatch(resetWeatherInformation())\n})\n\nexport default connect(mapStateToprops, mapDispatchToProps)(App);\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducer';\n\nconst store = createStore(reducer, {}, applyMiddleware(thunk));\nexport default store;","import { UPDATE_WEATHER, SET_ERROR_MESSAGE, RESET_WEATHER } from '../constants'\n\nexport default function reducer(state = {\n    weather: '',\n    errorMsg: ''\n  }, action) {\n  switch (action.type) {\n    case UPDATE_WEATHER:\n      return Object.assign({}, state, {\n        weather: action.payload,\n        errorMsg: ''\n      });\n\n    case SET_ERROR_MESSAGE:\n      return Object.assign({}, state, {\n        errorMsg: action.payload,\n        weather: ''\n      });\n\n    case RESET_WEATHER:\n      return Object.assign({}, state, {\n        weather: '',\n        errorMsg: ''\n      })\n    \n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}